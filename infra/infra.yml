AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Owner:
    Type: String
  MinInstances:
    Type: Number
    Default: 2
  MaxInstances:
    Type: Number
    Default: 4
  InstanceType:
    Type: String
    Default: t3.nano

Resources:
  ##############################
  #  VPC
  ##############################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.128.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-VPC

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC

  DynamoDbVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC

  ##############################
  #  Public subnet
  ##############################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
      VpcId: !Ref VPC
      CidrBlock: 10.128.11.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PublicSubnetA

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
      VpcId: !Ref VPC
      CidrBlock: 10.128.12.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PublicSubnetC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-InternetGateway

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PublicRouteTable

  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  ##############################
  #  Private subnet
  ##############################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['0', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
      VpcId: !Ref VPC
      CidrBlock: 10.128.13.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PrivateSubnetA

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ['1', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
      VpcId: !Ref VPC
      CidrBlock: 10.128.14.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PrivateSubnetC

  NatEipA:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'

  NatEipC:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-NatGatewayA

  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipC.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-NatGatewayC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PrivateRouteTableA

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-PrivateRouteTableC

  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetCRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

  ##############################
  #  EC2
  ##############################
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Owner}-InstanceSG
      GroupDescription: allow to ec2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ApplicationLoadBalancerSG.GroupId
          Description: allow alb to ec2
          IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Owner}-LaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: ami-0af1df87db7b650f4
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref InstanceSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # get admin privileges
            sudo su
            # Installing CodeDeploy Agent
            yum update -y
            yum install -y ruby
            # install httpd (Linux 2 version)
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello World from $(hostname -f)" > /var/www/html/index.html
            # Download the agent (replace the region)
            cd ~
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./installc
            ./install auto
            service codedeploy-agent status

  ##############################
  #  Application LoadBalancer
  ##############################
  ApplicationLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Owner}-ApplicationLoadBalancerSG
      GroupDescription: allow to alb
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 60.251.45.137/32
          Description: allow 104 ip 80 port
          IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Owner}-ApplicationLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSG
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: !Sub ${Owner}-TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ##############################
  #  Auto Scaling
  ##############################
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${Owner}-AutoScalingGroup
      AvailabilityZones:
        - !Select ['0', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
        - !Select ['1', 'Fn::GetAZs': { Ref: 'AWS::Region' }]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxInstances
      MinSize: !Ref MinInstances
      VPCZoneIdentifier:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${Owner}-AutoScalingGroupInstance
          PropagateAtLaunch: true

  ##############################
  #  CodeDeploy
  ##############################
  DeployBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  GetObjectFromDeployBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Owner}-GetObjectFromDeployBucket
      Roles:
        - !Ref InstanceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject*'
            Resource: !Sub ${DeployBucket.Arn}/*

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${Owner}-Application
      ComputePlatform: Server

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      DeploymentConfigName: CodeDeployDefault.HalfAtATime
      DeploymentGroupName: master
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt TargetGroup.TargetGroupName
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn

  TravisUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess

  PutObjectToDeployBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Owner}-PutObjectToDeployBucket
      Users:
        - !Ref TravisUser
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Sub ${DeployBucket.Arn}/*

  ##############################
  #  DB
  ##############################
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: User
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
